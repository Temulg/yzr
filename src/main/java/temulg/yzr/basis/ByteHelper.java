/*
 * Copyright (c) 2018 Alex Dubov <oakad@yahoo.com>
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

package temulg.yzr.basis;

public class ByteHelper {
	private ByteHelper() {
	}

	public static int onesCount(byte b) {
		return BYTE_PARAMS[b & 0xff] & 0xf;
	}

	public static int trailingZeros(byte b) {
		return (BYTE_PARAMS[b & 0xff] >>> 4) & 0xf;
	}

	public static int leadingZeros(byte b) {
		return (BYTE_PARAMS[b & 0xff] >>> 8) & 0xf;
	}

	public static int trailingNthOne(byte b, int count) {
		int pos = 0;

		switch (count) {
		case 7:
			return (b == 0xff) ? 7 : -1;
		case 6:
			if (onesCount(b) > 6) {
				return ((b & 0x7f) == 0x7f) ? 6 : 7;
			} else
				return -1;
		case 5:
			pos = trailingZeros(b);
			if (pos > 2)
				return -1;
			b ^= 1 << pos;
		case 4:
			pos = trailingZeros(b);
			if (pos > 3)
				return -1;
			b ^= 1 << pos;
		case 3:
			pos = trailingZeros(b);
			if (pos > 4)
				return -1;
			b ^= 1 << pos;
		case 2:
			pos = trailingZeros(b);
			if (pos > 5)
				return -1;
			b ^= 1 << pos;
		case 1:
			pos = trailingZeros(b);
			if (pos > 6)
				return -1;
			b ^= 1 << pos;
		case 0:
			pos = trailingZeros(b);
			return pos < 8 ? pos : -1;
		default:
			return -1;
		}
	}

	public static byte reverse(byte b) {
		return BIT_REVERSE[b & 0xff];
	}

	private static char[] BYTE_PARAMS = new char[] {
		(char)0x0880, (char)0x0701, (char)0x0611, (char)0x0602, // 0x00
		(char)0x0521, (char)0x0502, (char)0x0512, (char)0x0503,
		(char)0x0431, (char)0x0402, (char)0x0412, (char)0x0403,
		(char)0x0422, (char)0x0403, (char)0x0413, (char)0x0404,
		(char)0x0341, (char)0x0302, (char)0x0312, (char)0x0303, // 0x10
		(char)0x0322, (char)0x0303, (char)0x0313, (char)0x0304,
		(char)0x0332, (char)0x0303, (char)0x0313, (char)0x0304,
		(char)0x0323, (char)0x0304, (char)0x0314, (char)0x0305,
		(char)0x0251, (char)0x0202, (char)0x0212, (char)0x0203, // 0x20
		(char)0x0222, (char)0x0203, (char)0x0213, (char)0x0204,
		(char)0x0232, (char)0x0203, (char)0x0213, (char)0x0204,
		(char)0x0223, (char)0x0204, (char)0x0214, (char)0x0205,
		(char)0x0242, (char)0x0203, (char)0x0213, (char)0x0204, // 0x30
		(char)0x0223, (char)0x0204, (char)0x0214, (char)0x0205,
		(char)0x0233, (char)0x0204, (char)0x0214, (char)0x0205,
		(char)0x0224, (char)0x0205, (char)0x0215, (char)0x0206,
		(char)0x0161, (char)0x0102, (char)0x0112, (char)0x0103, // 0x40
		(char)0x0122, (char)0x0103, (char)0x0113, (char)0x0104,
		(char)0x0132, (char)0x0103, (char)0x0113, (char)0x0104,
		(char)0x0123, (char)0x0104, (char)0x0114, (char)0x0105,
		(char)0x0142, (char)0x0103, (char)0x0113, (char)0x0104, // 0x50
		(char)0x0123, (char)0x0104, (char)0x0114, (char)0x0105,
		(char)0x0133, (char)0x0104, (char)0x0114, (char)0x0105,
		(char)0x0124, (char)0x0105, (char)0x0115, (char)0x0106,
		(char)0x0152, (char)0x0103, (char)0x0113, (char)0x0104, // 0x60
		(char)0x0123, (char)0x0104, (char)0x0114, (char)0x0105,
		(char)0x0133, (char)0x0104, (char)0x0114, (char)0x0105,
		(char)0x0124, (char)0x0105, (char)0x0115, (char)0x0106,
		(char)0x0143, (char)0x0104, (char)0x0114, (char)0x0105, // 0x70
		(char)0x0124, (char)0x0105, (char)0x0115, (char)0x0106,
		(char)0x0134, (char)0x0105, (char)0x0115, (char)0x0106,
		(char)0x0125, (char)0x0106, (char)0x0116, (char)0x0107,
		(char)0x0071, (char)0x0002, (char)0x0012, (char)0x0003, // 0x80
		(char)0x0022, (char)0x0003, (char)0x0013, (char)0x0004,
		(char)0x0032, (char)0x0003, (char)0x0013, (char)0x0004,
		(char)0x0023, (char)0x0004, (char)0x0014, (char)0x0005,
		(char)0x0042, (char)0x0003, (char)0x0013, (char)0x0004, // 0x90
		(char)0x0023, (char)0x0004, (char)0x0014, (char)0x0005,
		(char)0x0033, (char)0x0004, (char)0x0014, (char)0x0005,
		(char)0x0024, (char)0x0005, (char)0x0015, (char)0x0006,
		(char)0x0052, (char)0x0003, (char)0x0013, (char)0x0004, // 0xa0
		(char)0x0023, (char)0x0004, (char)0x0014, (char)0x0005,
		(char)0x0033, (char)0x0004, (char)0x0014, (char)0x0005,
		(char)0x0024, (char)0x0005, (char)0x0015, (char)0x0006,
		(char)0x0043, (char)0x0004, (char)0x0014, (char)0x0005, // 0xb0
		(char)0x0024, (char)0x0005, (char)0x0015, (char)0x0006,
		(char)0x0034, (char)0x0005, (char)0x0015, (char)0x0006,
		(char)0x0025, (char)0x0006, (char)0x0016, (char)0x0007,
		(char)0x0062, (char)0x0003, (char)0x0013, (char)0x0004, // 0xc0
		(char)0x0023, (char)0x0004, (char)0x0014, (char)0x0005,
		(char)0x0033, (char)0x0004, (char)0x0014, (char)0x0005,
		(char)0x0024, (char)0x0005, (char)0x0015, (char)0x0006,
		(char)0x0043, (char)0x0004, (char)0x0014, (char)0x0005, // 0xd0
		(char)0x0024, (char)0x0005, (char)0x0015, (char)0x0006,
		(char)0x0034, (char)0x0005, (char)0x0015, (char)0x0006,
		(char)0x0025, (char)0x0006, (char)0x0016, (char)0x0007,
		(char)0x0053, (char)0x0004, (char)0x0014, (char)0x0005, // 0xe0
		(char)0x0024, (char)0x0005, (char)0x0015, (char)0x0006,
		(char)0x0034, (char)0x0005, (char)0x0015, (char)0x0006,
		(char)0x0025, (char)0x0006, (char)0x0016, (char)0x0007,
		(char)0x0044, (char)0x0005, (char)0x0015, (char)0x0006, // 0xf0
		(char)0x0025, (char)0x0006, (char)0x0016, (char)0x0007,
		(char)0x0035, (char)0x0006, (char)0x0016, (char)0x0007,
		(char)0x0026, (char)0x0007, (char)0x0017, (char)0x0008
	};

	private static byte[] BIT_REVERSE = new byte[] {
		(byte)0x00, (byte)0x80, (byte)0x40, (byte)0xc0, // 0x00
		(byte)0x20, (byte)0xa0, (byte)0x60, (byte)0xe0,
		(byte)0x10, (byte)0x90, (byte)0x50, (byte)0xd0,
		(byte)0x30, (byte)0xb0, (byte)0x70, (byte)0xf0,
		(byte)0x08, (byte)0x88, (byte)0x48, (byte)0xc8, // 0x10
		(byte)0x28, (byte)0xa8, (byte)0x68, (byte)0xe8,
		(byte)0x18, (byte)0x98, (byte)0x58, (byte)0xd8,
		(byte)0x38, (byte)0xb8, (byte)0x78, (byte)0xf8,
		(byte)0x04, (byte)0x84, (byte)0x44, (byte)0xc4, // 0x20
		(byte)0x24, (byte)0xa4, (byte)0x64, (byte)0xe4,
		(byte)0x14, (byte)0x94, (byte)0x54, (byte)0xd4,
		(byte)0x34, (byte)0xb4, (byte)0x74, (byte)0xf4,
		(byte)0x0c, (byte)0x8c, (byte)0x4c, (byte)0xcc, // 0x30
		(byte)0x2c, (byte)0xac, (byte)0x6c, (byte)0xec,
		(byte)0x1c, (byte)0x9c, (byte)0x5c, (byte)0xdc,
		(byte)0x3c, (byte)0xbc, (byte)0x7c, (byte)0xfc,
		(byte)0x02, (byte)0x82, (byte)0x42, (byte)0xc2, // 0x40
		(byte)0x22, (byte)0xa2, (byte)0x62, (byte)0xe2,
		(byte)0x12, (byte)0x92, (byte)0x52, (byte)0xd2,
		(byte)0x32, (byte)0xb2, (byte)0x72, (byte)0xf2,
		(byte)0x0a, (byte)0x8a, (byte)0x4a, (byte)0xca, // 0x50
		(byte)0x2a, (byte)0xaa, (byte)0x6a, (byte)0xea,
		(byte)0x1a, (byte)0x9a, (byte)0x5a, (byte)0xda,
		(byte)0x3a, (byte)0xba, (byte)0x7a, (byte)0xfa,
		(byte)0x06, (byte)0x86, (byte)0x46, (byte)0xc6, // 0x60
		(byte)0x26, (byte)0xa6, (byte)0x66, (byte)0xe6,
		(byte)0x16, (byte)0x96, (byte)0x56, (byte)0xd6,
		(byte)0x36, (byte)0xb6, (byte)0x76, (byte)0xf6,
		(byte)0x0e, (byte)0x8e, (byte)0x4e, (byte)0xce, // 0x70
		(byte)0x2e, (byte)0xae, (byte)0x6e, (byte)0xee,
		(byte)0x1e, (byte)0x9e, (byte)0x5e, (byte)0xde,
		(byte)0x3e, (byte)0xbe, (byte)0x7e, (byte)0xfe,
		(byte)0x01, (byte)0x81, (byte)0x41, (byte)0xc1, // 0x80
		(byte)0x21, (byte)0xa1, (byte)0x61, (byte)0xe1,
		(byte)0x11, (byte)0x91, (byte)0x51, (byte)0xd1,
		(byte)0x31, (byte)0xb1, (byte)0x71, (byte)0xf1,
		(byte)0x09, (byte)0x89, (byte)0x49, (byte)0xc9, // 0x90
		(byte)0x29, (byte)0xa9, (byte)0x69, (byte)0xe9,
		(byte)0x19, (byte)0x99, (byte)0x59, (byte)0xd9,
		(byte)0x39, (byte)0xb9, (byte)0x79, (byte)0xf9,
		(byte)0x05, (byte)0x85, (byte)0x45, (byte)0xc5, // 0xa0
		(byte)0x25, (byte)0xa5, (byte)0x65, (byte)0xe5,
		(byte)0x15, (byte)0x95, (byte)0x55, (byte)0xd5,
		(byte)0x35, (byte)0xb5, (byte)0x75, (byte)0xf5,
		(byte)0x0d, (byte)0x8d, (byte)0x4d, (byte)0xcd, // 0xb0
		(byte)0x2d, (byte)0xad, (byte)0x6d, (byte)0xed,
		(byte)0x1d, (byte)0x9d, (byte)0x5d, (byte)0xdd,
		(byte)0x3d, (byte)0xbd, (byte)0x7d, (byte)0xfd,
		(byte)0x03, (byte)0x83, (byte)0x43, (byte)0xc3, // 0xc0
		(byte)0x23, (byte)0xa3, (byte)0x63, (byte)0xe3,
		(byte)0x13, (byte)0x93, (byte)0x53, (byte)0xd3,
		(byte)0x33, (byte)0xb3, (byte)0x73, (byte)0xf3,
		(byte)0x0b, (byte)0x8b, (byte)0x4b, (byte)0xcb, // 0xd0
		(byte)0x2b, (byte)0xab, (byte)0x6b, (byte)0xeb,
		(byte)0x1b, (byte)0x9b, (byte)0x5b, (byte)0xdb,
		(byte)0x3b, (byte)0xbb, (byte)0x7b, (byte)0xfb,
		(byte)0x07, (byte)0x87, (byte)0x47, (byte)0xc7, // 0xe0
		(byte)0x27, (byte)0xa7, (byte)0x67, (byte)0xe7,
		(byte)0x17, (byte)0x97, (byte)0x57, (byte)0xd7,
		(byte)0x37, (byte)0xb7, (byte)0x77, (byte)0xf7,
		(byte)0x0f, (byte)0x8f, (byte)0x4f, (byte)0xcf, // 0xf0
		(byte)0x2f, (byte)0xaf, (byte)0x6f, (byte)0xef,
		(byte)0x1f, (byte)0x9f, (byte)0x5f, (byte)0xdf,
		(byte)0x3f, (byte)0xbf, (byte)0x7f, (byte)0xff
	};
}
